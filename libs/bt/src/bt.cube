enum Status
{
    Success, Failure, Running
}

class Node
{
    var name = none;
    static var id = 0;

    func init()
    {
        name = 'Node' + (++Node.id);
    }

    func run()
    {
        println(name);
        return Status.Success;
    }
}

class Sequence : Node
{
    var children = [];

    func add(node)
    {
        children.add(node);
    }

    func run()
    {
        super.run();
        var ret = Status.Success;
        for(var child in children)
        {
            ret = child.run();
            if(ret != Status.Success)
            {
                return ret;
            }
        }
        return ret;
    }
}

class Selector : Node
{
    var children = [];

    func add(node)
    {
        children.add(node);
    }

    func run()
    {
        super.run();
        var ret = Status.Success;
        for(var child in children)
        {
            ret = child.run();
            if(ret != Status.Failure)
            {
                return ret;
            }
        }
        return ret;
    }
}

class Condition : Node
{
    var fn;

    func init(fn)
    {
        super.init();
        this.fn = fn;
    }

    func run()
    {
        super.run();
        var ret = fn();
        if(ret == Status.Success or bool(ret) == true)
            return Status.Success;
        else
            return Status.Failure;
    }
}

class Action : Node
{
    var fn;

    func init(fn)
    {
        super.init();
        this.fn = fn;
    }

    func run()
    {
        super.run();
        return fn();
    }
}

class Inverter : Node
{
    var child;

    func init(child)
    {
        super.init();
        this.child = child;
    }

    func run()
    {
        super.run();
        var ret = child.run();
        if(ret == Status.Success)
            return Status.Failure;
        else if(ret == Status.Failure)
            return Status.Success;
        else
            return Status.Running;
    }
}

class BT
{
    var root = none;
    var interval = 30;

    func init(root, interval)
    {
        if(interval == none)
            interval = 30;

        this.root = root;
        this.interval = interval;
    }

    func run()
    {
        for(var i = 0; i < 1; ++i)
        {
            tick();
            wait(interval);
        }
    }

    func tick()
    {
        var ret = root.run();
        println(ret);
    }
}